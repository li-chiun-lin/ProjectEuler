/*
5%

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

	Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
	Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
	Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/

#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <string>
#include <queue>

using namespace std;

int euler()
{
	long long i = 3, j = 3, k = 3;
	vector<long long> tri = {1, 3};
	vector<long long> pen = {1, 5};
	vector<long long> hex = {1, 6};

	while (true)
	{
		if (tri.back() == pen.back() && pen.back() == hex.back())
		{
			cout << tri.back() << endl;

			tri.push_back(i * (i + 1) / 2);
			++ i;
			pen.push_back(j * (3 * j - 1) / 2);
			++ j;
			hex.push_back(k * (2 * k - 1));
			++ k;
		}
		else if (tri.back() <= pen.back() && tri.back() <= hex.back())
		{
			tri.push_back(i * (i + 1) / 2);
			++ i;
		}
		else if (pen.back() <= tri.back() && pen.back() <= hex.back())
		{
			pen.push_back(j * (3 * j - 1) / 2);
			++ j;
		}
		else if (hex.back() <= tri.back() && hex.back() <= pen.back())
		{
			hex.push_back(k * (2 * k - 1));
			++ k;
		}
		else
		{
			cout << "!" << endl;
			break;
		}

		//cout << i << " " << j << " " << k << endl;
	}

	return 0;
}

int main()
{
	cout << euler() << endl;

	return 0;
}
