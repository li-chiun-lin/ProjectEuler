/*
20%

<p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:</p>
<table><tr><td>Triangle</td>
<td> </td>
<td>$P_{3,n}=n(n+1)/2$</td>
<td> </td>
<td>$1, 3, 6, 10, 15, \dots$</td>
</tr><tr><td>Square</td>
<td> </td>
<td>$P_{4,n}=n^2$</td>
<td> </td>
<td>$1, 4, 9, 16, 25, \dots$</td>
</tr><tr><td>Pentagonal</td>
<td> </td>
<td>$P_{5,n}=n(3n-1)/2$</td>
<td> </td>
<td>$1, 5, 12, 22, 35, \dots$</td>
</tr><tr><td>Hexagonal</td>
<td> </td>
<td>$P_{6,n}=n(2n-1)$</td>
<td> </td>
<td>$1, 6, 15, 28, 45, \dots$</td>
</tr><tr><td>Heptagonal</td>
<td> </td>
<td>$P_{7,n}=n(5n-3)/2$</td>
<td> </td>
<td>$1, 7, 18, 34, 55, \dots$</td>
</tr><tr><td>Octagonal</td>
<td> </td>
<td>$P_{8,n}=n(3n-2)$</td>
<td> </td>
<td>$1, 8, 21, 40, 65, \dots$</td>
</tr></table><p>The ordered set of three $4$-digit numbers: $8128$, $2882$, $8281$, has three interesting properties.</p>
<ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li>
<li>Each polygonal type: triangle ($P_{3,127}=8128$), square ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a different number in the set.</li>
<li>This is the only set of $4$-digit numbers with this property.</li>
</ol><p>Find the sum of the only ordered set of six cyclic $4$-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p>
*/

#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>

using namespace std;

int p3(int n) { return n * (n + 1) / 2; }
int p4(int n) { return n * n; }
int p5(int n) { return n * (3 * n - 1) / 2; }
int p6(int n) { return n * (2 * n - 1); }
int p7(int n) { return n * (5 * n - 3) / 2; }
int p8(int n) { return n * (3 * n - 2); }

const int lb = 1000;
const int ub = 10000;

void print(vector<int> &v)
{
	for (auto x : v)
		cout << x << " ";
}

bool dfs(vector<vector<pair<int, int>>> &adj, int u, int n, vector<int> &buf)
{
	if (buf.size() == 6)
	{
		if (buf.front() == u)
		{
			cout << n << " : ";
			print(buf);
			cout << u << endl;

			int sum = accumulate(begin(buf), end(buf), 0);
			cout << sum * 101 << endl;
			return true;
		}
		else
			return false;
	}

	buf.push_back(u);

	for (auto &v : adj[u])
	{
		if (n & v.second)
			continue;

		if (dfs(adj, v.first, n | v.second, buf))
			return true;
	}

	buf.pop_back();
	return false;
}

int euler(int n)
{
	vector<vector<pair<int, int>>> adj(100);
	int v;
	int (*p[])(int) = {NULL, NULL, NULL, &p3, &p4, &p5, &p6, &p7, &p8};

	for (int i = 1; i < 150; ++i)
		for (int j = 3; j <= 8; ++j)
		{
			v = p[j](i);
			if (lb <= v && v < ub)
				adj[v / 100].push_back({v % 100, 1 << j});
		}

	for (int i = 0; i < adj.size(); ++i)
	{
		vector<int> buf;
		dfs(adj, i, 0, buf);
	}

	return 0;
}

int main()
{
	cout << euler(0) << endl;

	return 0;
}
