/*
5%

<p>Consider all integer combinations of $a^b$ for $2 \le a \le 5$ and $2 \le b \le 5$:</p>
\begin{matrix}
2^2=4, &amp;2^3=8, &amp;2^4=16, &amp;2^5=32\\
3^2=9, &amp;3^3=27, &amp;3^4=81, &amp;3^5=243\\
4^2=16, &amp;4^3=64, &amp;4^4=256, &amp;4^5=1024\\
5^2=25, &amp;5^3=125, &amp;5^4=625, &amp;5^5=3125
\end{matrix}
<p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of $15$ distinct terms:
$$4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.$$</p>
<p>How many distinct terms are in the sequence generated by $a^b$ for $2 \le a \le 100$ and $2 \le b \le 100$?</p>
*/

#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <map>
#include <numeric>
#include <set>
#include <stack>
#include <string>
#include <queue>

using namespace std;

void print(vector<int> &v)
{
	for (int x : v)
		cout << x << " ";
	cout << endl;
}

void mul(vector<int> &a, vector<int> &b)
{
	vector<int> t(a.size() + b.size());
	int c = 0;

	for (int i = 0; i < a.size(); ++i)
		for (int j = 0; j < b.size(); ++j)
			t[i + j] += a[i] * b[j];

	for (int k = 0; k < a.size(); ++k)
	{
		a[k] = t[k] + c;
		c = a[k] / 10;
		a[k] %= 10;
	}

	for (int k = a.size(); k < t.size(); ++k)
	{
		a.push_back(t[k] + c);
		c = a.back() / 10;
		a.back() %= 10;
	}

	a.push_back(c);

	while (a.size() && a.back() == 0)
		a.pop_back();

	//print(a);
}

vector<int> pow(int a, int b)
{
	vector<int> base;
	vector<int> ret = {1};

	while (a)
	{
		base.push_back(a % 10);
		a /= 10;
	}
	
	while (b)
	{
		if (b & 1)
			mul(ret, base);

		mul(base, base);
		b >>= 1;
	}

	return ret;
}

int euler(int n)
{
	set<vector<int>> ss;

	for (int a = 2; a <= n; ++a)
		for (int b = 2; b <= n; ++b)
			ss.insert(pow(a, b));

	return ss.size();
}

int main()
{
	cout << euler(5) << endl;
	cout << euler(100) << endl;

	return 0;
}
