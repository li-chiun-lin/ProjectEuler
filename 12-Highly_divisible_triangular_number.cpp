/*
5%

<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>Let us list the factors of the first seven triangle numbers:</p>
\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}
<p>We can see that $28$ is the first triangle number to have over five divisors.</p>
<p>What is the value of the first triangle number to have over five hundred divisors?</p>
*/

#include <cstdlib>
#include <iostream>
#include <cmath>
#include <set>
#include <stack>
#include <map>
#include <queue>
#include <algorithm>
#include <numeric>

using namespace std;

long long euler(int n)
{
	vector<int> prime = {2, 3, 5, 7, 11, 13, 17}; 
	
	while (prime.size() < n)
	{
		int next = prime.back() + 2;
		bool isPrime = false;

		while (! isPrime)
		{
			isPrime = true;

			for (int i = 0; i < prime.size() && isPrime; ++i)
				if (next % prime[i] == 0)
					isPrime = false;

			if (isPrime)
				prime.push_back(next);
			else
				next += 2;
		} 
	}

	long long i = 1;

	while (true)
	{
		long long sum = i * (i + 1) / 2;
		long long total = 1;

		for (int p = 0; p < prime.size() && prime[p] <= sum; ++p)
		{
			long long cnt = 1;

			while (sum % prime[p] == 0)
			{
				sum /= prime[p];
				++ cnt;
			}

			total *= cnt;
		}

		if (total >= n)
			return i * (i + 1) / 2;

		++ i;
	}

	return 0;
}

int main()
{
	cout << euler(5) << endl;
	cout << euler(500) << endl;

	return 0;
}
